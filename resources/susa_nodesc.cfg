[general]
header = SUSA-navet: Utbildningar som saknar beskrivning
default_json_file = susa.json
# This filter identifies if an education is missing its description, i.e. if both 'swe' and 'eng' are empty.
# Also cases such as these are counted as empty: "<p></p>", ".", "https://someurltothecourse"
filter = lambda x: len([y.get('content') for y in x.get('education').get('description') if len(re.sub('</?p>|</?div>|</?h[1-9]>|http[s]?://\S+', '', y.get('content') if y.get('content') else '').strip()) > 1]) == 0
filter_desc = Alla 'education'-objekt med innehållslös 'description'
filter_show_count = true
item_id_func = lambda x: x.get('id')
item_oneliner_func = lambda x: f"id={x.get('id')} - {x.get('education').get('title')[0].get('content')}"
item_links_list_func = lambda x: x.get('events') and x['events'][0].get('urls') and x['events'][0]['urls'][0].get('content')
[group1]
# Myndighet
grouper_func = lambda x: x.get('id').split('.')[1]
sort = count
[group2]
# Skoltyp
grouper_func = lambda x: x.get('education').get('form').get('code')
sort = false
[group3]
# Lärosäte (kan finnas flera)
grouper_func = lambda x: f"{x['education_providers'][0].get('responsibleBody')[0].get('content')} {'+'+str(len(x['education_providers'])-1)+' andra lärosäten' if len(x['education_providers'])>1 else ''}" or '(lärosäte saknas)'
sort = count
