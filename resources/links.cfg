[general]
header = Jobtech Links: Externa annonssajter
default_json_file = links.json
# Filtrera bort annonser som bara har länkar till AF
filter = lambda x: len(list(filter(lambda y: y.get('displayName') != 'arbetsformedlingen.se', x.get('original_source_links')))) > 0
filter_desc = Rena AF-annonser är exkluderade (och även alla AF-länkar)
item_id_func = lambda x: x.get('id')
item_oneliner_func = lambda x: x.get('originalJobPosting').get('title')
# Ge bara en länk per sajt. Struktur: [next(z for z in x if y in z) for y in set]
# A simpler but uglier alternative would be: item_links_list_func = lambda x: [y.get('link') for y in x.get('original_source_links') if y.get('displayName') != 'arbetsformedlingen.se']
item_links_list_func = lambda x: (site_set := {y.get('displayName','-') for y in x.get('original_source_links') if y.get('displayName') != 'arbetsformedlingen.se'}) and [next(z.get('link') for z in x.get('original_source_links') if y in z.get('displayName')) for y in site_set]
[group1]
# Externa sajter (en till flera)
grouper_func = lambda x: (site_set := {y.get('displayName','-') for y in x.get('original_source_links') if y.get('displayName') != 'arbetsformedlingen.se'}) and (sorted_site_set := str(sorted(site_set))[1:-1].replace("'","")) and f"({len(site_set)}) {sorted_site_set}"
sort = ascending
[group2]
# Land
grouper_func = lambda x: x.get('workplace_addresses') and x['workplace_addresses'][0].get('country') or '(land saknas)'
sort = count
[group3]
# Region
grouper_func = lambda x: x.get('workplace_addresses') and x['workplace_addresses'][0].get('region') or '(region saknas)'
sort = count
