[general]
header = Jobtech Links: Annonser som saknas p책 AF
default_json_file = links.json
# Filtrera bort annonser som finns p책 Platsbanken
filter = lambda x: not 'arbetsformedlingen.se' in {y.get('displayName','-') for y in x.get('original_source_links')}
filter_desc = Bara annonser som helt saknas p책 Platsbanken
item_id_func = lambda x: x.get('id')
item_oneliner_func = lambda x: x.get('originalJobPosting').get('title')
# Ge bara en l채nk per sajt. Struktur: [next(z for z in x if y in z) for y in set]
item_links_list_func = lambda x: (site_set := {y.get('displayName','-') for y in x.get('original_source_links')}) and [next(z.get('link') for z in x.get('original_source_links') if y in z.get('displayName')) for y in site_set]
[group1]
# Externa sajter (en till flera)
grouper_func = lambda x: (site_set := {y.get('displayName','-') for y in x.get('original_source_links')}) and (sorted_site_set := str(sorted(site_set))[1:-1].replace("'","")) and f"({len(site_set)}) {sorted_site_set}"
sort = ascending
[group2]
grouper_func = lambda x: (jae_max := max(x.get('text_enrichments_results').get('enriched_result').get('enriched_candidates').get('occupations'), key=lambda z: z['prediction'], default={'concept_label': '-'})['concept_label']) and (jae_max if jae_max != '-' else (x.get('originalJobPosting').get('relevantOccupation') and x['originalJobPosting']['relevantOccupation'].get('name') or '(yrke saknas)'))
sort = count
