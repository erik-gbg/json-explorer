import jsonfrom sys import argvfrom os import listdirfrom os.path import isfile, join, splitext, dirname, basenamefrom configparser import ConfigParserimport PySimpleGUI as sgimport webbrowserimport re  # to make it available in config filesresource_path = 'resources'config_ext = '.cfg'json_ext = '.json'json_icon = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsSAAALEgHS3X78AAABU0lEQVQ4y52TzStEURiHn/ecc6XG54JSdlMkNhYWsiILS0lsJaUsLW2Mv8CfIDtr2VtbY4GUEvmIZnKbZsY977Uwt2HcyW1+dTZvt6fn9557BGB+aaNQKBR2ifkbgWR+cX13ubO1svz++niVTA1ArDHDg91UahHFsMxbKWycYsjze4muTsP64vT43v7hSf/A0FgdjQPQWAmco68nB+T+SFSqNUQgcIbN1bn8Z3RwvL22MAvcu8TACFgrpMVZ4aUYcn77BMDkxGgemAGOHIBXxRjBWZMKoCPA2h6qEUSRR2MF6GxUUMUaIUgBCNTnAcm3H2G5YQfgvccYIXAtDH7FoKq/AaqKlbrBj2trFVXfBPAea4SOIIsBeN9kkCwxsNkAqRWy7+B7Z00G3xVc2wZeMSI4S7sVYkSk5Z/4PyBWROqvox3A28PN2cjUwinQC9QyckKALxj4kv2auK0xAAAAAElFTkSuQmCC'url_icon = b'iVBORw0KGgoAAAANSUhEUgAAABUAAAAHCAIAAABoa5FRAAAACXBIWXMAAAewAAAHsAHUgoNiAAABlElEQVQYlaXLSS8DYRgA4NenIqlKMGKrLZYYQ1ttVSwHsVzFvX9C3ESJi+AgEQl/QDioWA5CItZIqrEzHbrQUq1Kq9WhxehMXxf/wHN/UhAR/oFAzNs3OJkEWJzsn1qyAiRGTcMLsyNbXETiPT09xvAP+E9Wp+dW+gYmkgBrMwPj8wcA4phpKCoCAUVxZtwTin9zr1HvuUXkn/n0gu4W7cGh1ediBSHi9EWPj1h9e1e28PT8IXDBiO/CIsaCb2m5WTIgAERVmcfeOAmllYsB5+11Ra2aYlo/Xcfs7YPR2Ht2cmUPieqiTB1ddMW5EnI6N/XVaedKKhkAIACgb2T215cpZX1Vjsy8dabW1srSczIIf+kOdXZ0uS9346lyRRppMGism2ZFHk0XKswbh3Va1d8vZ5qsO5u0RtVsqNmxPDClFKTI9GXUaRiUxSXSoyWfbiMAymrdxd5GjU5nMDDb+w5NdQEAACIiii4b+5lA6fvd5nAnERExFn658wYQ0e9xBPkvRESU7rjr+A9KQsxmv5cQEfEXY8DOiUBzuE8AAAAASUVORK5CYII='NONE, ALPHA, COUNT = 0, 1, 2def setup_config(cfgp):    config = {}    config['header'] = cfgp.get('general', 'header',                                fallback="JSON Explorer låter dig organisera en JSON-fil i grupper för bättre överblick")    config['default_json_file'] = cfgp.get('general', 'default_json_file', fallback=splitext('cfg')[0] + json_ext)    config['filter'] = cfgp.get('general', 'filter', fallback=None)    if config['filter']:        config['filter_desc'] = '[Filter] ' + cfgp.get('general', 'filter_desc', fallback=config['filter'])        config['filter_show_count'] = cfgp.get('general', 'filter_show_count', fallback=False)    else:        config['filter_desc'] = 'Inget filter använt'        config['filter_show_count'] = False    config['item_id_func'] = eval(cfgp.get('general', 'item_id_func', fallback="lambda x: x.get('id')"))    config['item_oneliner_func'] = eval(cfgp.get('general', 'item_oneliner_func', fallback="lambda x: str(x)[:120]"))    config['item_links_list_func'] = eval(cfgp.get('general', 'item_links_list_func', fallback="lambda x: None"))    group_level = 0    config['grouper_funcs'] = []    while True:        try:            config['grouper_funcs'].append(eval(cfgp.get(f"group{group_level + 1}", 'grouper_func')))            group_level += 1        except:            break    config['max_group'] = group_level    config['groups_sorted'] = []    for group_level in range(config['max_group']):        sbool, stext = True, 'alpha'        try:            sbool = cfgp.getboolean(f"group{group_level + 1}", 'sort', fallback=True)        except ValueError:            stext = cfgp.get(f"group{group_level + 1}", 'sort', fallback='alpha')        if not sbool:            sorting = NONE        elif stext.strip().lower() == 'count':            sorting = COUNT        else:            sorting = ALPHA        config['groups_sorted'].append(sorting)    return configdef _safe_append(lis, key, rec):    if not lis.get(key):        lis[key] = []    lis[key].append(rec)def build_data_tree(json_list, config):    def build_tree(sub_list, group_level):        if group_level > config['max_group']:            node = []            for record in sub_list:                node.append((config['item_id_func'](record),                             config['item_oneliner_func'](record),                             config['item_links_list_func'](record)))            return node        node = {}        for record in sub_list:            group_member = config['grouper_funcs'][group_level - 1](record)            _safe_append(node, group_member, record)        for group_member in node:            node[group_member] = build_tree(node[group_member], group_level + 1)        return node    return build_tree(json_list, 1)def _count_nested_dict(d):    if isinstance(d, dict):        return sum(_count_nested_dict(v) for v in d.values())    elif isinstance(d, list):        return len(d)    else:        return 1def build_gui_tree(treedata, dic, config):    def build_tree(d, level, level_name):        grouping = (level <= config['max_group'])        d_sorted_range = None        if grouping:            if config['groups_sorted'][level - 1] == NONE:                d_sorted_range = d            elif config['groups_sorted'][level - 1] == COUNT:                counts = [(v, _count_nested_dict(d[v])) for v in d]                # sort by 1. reversed count, and then 2. alphabetically                d_sorted_range = [tup[0] for tup in sorted(counts, key=lambda tup: (-tup[1], tup[0]))]        if not d_sorted_range:  # ALPHA by default            d_sorted_range = sorted(d)        if grouping and isinstance(d, dict):            for v in d_sorted_range:                key = 'g' + str(_new_key())                values = [len(d[v]) if level < config['max_group'] else '', _count_nested_dict(d[v])]                treedata.Insert(level_name, key, v, values=values)                build_tree(d[v], level + 1, key)        elif isinstance(d, list):            for v in d_sorted_range:                if isinstance(v, tuple):                    treedata.Insert(level_name, 'id' + v[0], str(v[1]), ['json'], icon=json_icon)                    if v[2]:                        urls = v[2] if isinstance(v[2], list) else [v[2]]                        for url in urls:                            if url:                                treedata.Insert(level_name, _new_key(), '    ' + str(url), ['url'], icon=url_icon)                else:                    treedata.Insert(level_name, 'strange-case' + str(_new_key()), str(v), [])        else:            treedata.Insert(level_name, 'strange-case' + str(_new_key()), str(d), [])    build_tree(dic, 1, '')max_key = 1def _new_key():    global max_key    max_key += 1    return max_keydef _percent(part, total):    return int(1000 * part / total) / 10def doc_window(key, doc):    layout = [[sg.Multiline(doc, auto_size_text=True, key=key, background_color='white', text_color='black')],              [sg.Button('Close')]]    sg.Window(key, layout, modal=True, keep_on_top=True, resizable=True, auto_size_text=True,              default_element_size=(100, 40)).read(close=True)def tree_view(treedata, waiting_window, config, key_figures, json_list):    font = 'Any 12'    count_text = f"Filtrerat {key_figures['filtered_count']} från totalen {key_figures['original_count']}: " \                 f"{_percent(key_figures['filtered_count'], key_figures['original_count'])}%" if config[        'filter_show_count'] \        else f"Total = {key_figures['filtered_count']}"    layout = [[sg.Text('Dubbel-klickning expanderar grupp, öppnar JSON eller öppnar URL', font=font)],              [sg.Tree(data=treedata, key='-TREE-', show_expanded=False, enable_events=True, font=font,                       col0_heading=config['header'], col0_width=100, num_rows=25,                       headings=['Typer', 'Summa'], justification='right', auto_size_columns=True)],              [sg.Button('Exit', font=font),               sg.Text(config['filter_desc'], expand_x=True, justification='center', text_color='black', font=font),               sg.Text(count_text + '    ', justification='right', text_color='black', font=font)]]    window = sg.Window('JSON Explorer', layout, finalize=True)    tree = window['-TREE-']    tree.bind('<Double-1>', "DOUBLE-CLICK-")    waiting_window.close()    while True:  # Event Loop        event, values = window.read()        if event in (sg.WIN_CLOSED, 'Exit'):            break        if event == '-TREE-DOUBLE-CLICK-':            key = values['-TREE-'][0]            try:                k = key[2:]                ix = key_figures['all_ids'].index(k)                doc = json.dumps(json_list[ix], indent=2).encode().decode('unicode_escape')                doc_window(f"id = {k}", doc)            except:                if isinstance(key, int):                    webbrowser.open(treedata.tree_dict[key].text.strip())    # window.close()def process_config(filename):    cfgp = ConfigParser()    if filename:        with open(filename, 'r', encoding='utf-8') as file:            cfgp.read_file(file)    return setup_config(cfgp)def open_waiting_window(key, config):    layout = [[sg.Text(config['header'], expand_x=True, justification='center', background_color='white',                       text_color='black', font='Any 12')],              [sg.Text('')], [sg.Text('LOADING JSON...', font='Any 12 bold', key=key)]]    return sg.Window('JSON Explorer', layout, size=(750, 300)).Finalize()def load_json(filename):    json_list = []    with open(filename, 'r', encoding='utf-8') as file:        is_jsonlines = file.read(1) != '['        file.seek(0)        if is_jsonlines:            for line in file:                json_list.append(json.loads(line))        else:            json_list = json.load(file)    return json_listdef main(config_filename=None, json_filename=None):    config = process_config(config_filename)    waiting_window = open_waiting_window('progress', config)    if not json_filename:        json_filename = join(dirname(config_filename), config['default_json_file'])    json_list = load_json(json_filename)    waiting_window['progress'].update('BUILDING TREE...')    key_figures = {}    key_figures['original_count'] = len(json_list)    if config['filter']:        json_list = list(filter(eval(config['filter']), json_list))    key_figures['filtered_count'] = len(json_list)    key_figures['all_ids'] = [config['item_id_func'](record) for record in json_list]    data_tree = build_data_tree(json_list, config)    build_gui_tree(treedata := sg.TreeData(), data_tree, config)    tree_view(treedata, waiting_window, config, key_figures, json_list)def demo():    def config_file_list():        return [f for f in listdir(resource_path) if isfile(join(resource_path, f)) and splitext(f)[1] == config_ext]    def get_choices_tuples(choices):        for i, cfg in enumerate(choices):            cfgp = ConfigParser()            with open(join(resource_path, cfg), 'r', encoding='utf-8') as file:                cfgp.read_file(file)            desc = cfgp.get('general', 'header', fallback=cfg)            json = cfgp.get('general', 'default_json_file', fallback=splitext(cfg)[0] + json_ext)            choices[i] = (desc, cfg, json)        return sorted(choices, key=lambda x: x[1])    def radio_window(choices):        radio = [[sg.Radio(item[0], 1, default=(i == 0))] for i, item in enumerate(choices)]        layout = [[sg.Text('')], [sg.Text('Välj en demo:', expand_x=True, justification='center')],                  [sg.Text('')]] + radio + [[sg.Text('')], [sg.OK()]]        event, values = sg.Window('JSON Explorer demo', layout, font='Any 12').read(close=True)        ix = next(i for i in values if values[i])        return ix    choices = get_choices_tuples(config_file_list())    ix = radio_window(choices)    main(join(resource_path, choices[ix][1]), join(resource_path, choices[ix][2]))if __name__ == "__main__":    argc = len(argv)    if argc == 1:        demo()    elif argc == 2:        if splitext(basename(argv[1]))[1] == config_ext:            main(config_filename=argv[1])        else:            main(json_filename=argv[1])    else:        main(argv[1], argv[2])